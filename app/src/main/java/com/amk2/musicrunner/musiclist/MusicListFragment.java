package com.amk2.musicrunner.musiclist;

import android.app.Fragment;
import android.app.LoaderManager;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.CursorLoader;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.Loader;
import android.content.SharedPreferences;
import android.database.Cursor;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.support.v4.content.LocalBroadcastManager;
import android.support.v4.view.MotionEventCompat;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewGroup;
import android.view.animation.Animation;
import android.view.animation.AnimationSet;
import android.view.animation.TranslateAnimation;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;

import com.amk2.musicrunner.Constant;
import com.amk2.musicrunner.R;
import com.amk2.musicrunner.utilities.MusicLib;
import com.amk2.musicrunner.utilities.OnPlaylistPreparedListener;

import com.hb.views.PinnedSectionListView;
import com.hb.views.PinnedSectionListView.PinnedSectionListAdapter;

import java.util.ArrayList;

/**
 * Created by logicmelody on 2014/9/23.
 */

public class MusicListFragment extends Fragment implements
        View.OnClickListener,
        OnPlaylistPreparedListener,
        AdapterView.OnItemClickListener{

    public interface OnDisableViewPagerSwipeListener {
        public void setDisableViewPagerSwipe (boolean disableViewPagerSwipe);
    }
    public static final String CREATE_PLAYLIST = "com.amk2.music.create_playlist";
    public static final String UPDATE_PLAYLIST = "com.amk2.music.update_playlist";
    public static final String CHANGE_PLAYLIST = "com.amk2.music.change_playlist";
    public static final String PLAYLIST_URI    = "playlist_uri";
    public static final String PLAYLIST_POSITION = "playlist_position";
    public static final String PLAYLIST_ID = "playlist_id";
    private static final String TAG = "MusicListFragment";
    private static final int MUSIC_LOADER_ID = 1;
    private static final int LEFT  = 0;
    private static final int RIGHT = 1;

    private static final String[] MUSIC_SELECT_PROJECTION = new String[] {
            android.provider.MediaStore.Audio.Media._ID,
            android.provider.MediaStore.Audio.Media.TITLE,
            android.provider.MediaStore.Audio.Media.ARTIST,
            android.provider.MediaStore.Audio.Media.DURATION
    };

    private PinnedSectionListView playlistContainer;
    private ImageView createPlaylistButtonImageView;

    private ArrayList<Object> mPlaylistMetaData;
    ArrayList<Object> mAutoGeneratedPlaylistMetaDatas;
    ArrayList<PlaylistMetaData> mUserGeneratedPlaylistMetaDatas;
    private PlaylistPinnedSectionListAdapter playlistPinnedSectionListAdapter;

    private LayoutInflater inflater;
    private Fragment self;
    private OnDisableViewPagerSwipeListener mOnDisableViewPagerSwipeListener;

    private int offsetToLeft;
    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        return inflater.inflate(R.layout.music_list_fragment, container, false);
    }

    @Override
    public void onActivityCreated(Bundle savedInstanceState) {
        super.onActivityCreated(savedInstanceState);
        LocalBroadcastManager.getInstance(getActivity()).registerReceiver(mCreatePlaylistReceiver, new IntentFilter(CREATE_PLAYLIST));
        LocalBroadcastManager.getInstance(getActivity()).registerReceiver(mUpdatePlaylistReceiver, new IntentFilter(UPDATE_PLAYLIST));
        inflater = (LayoutInflater) getActivity().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
        mPlaylistMetaData = new ArrayList<Object>();
        self = this;

        initViews();
        setViews();
    }

    @Override
    public void onResume () {
        // put initLoader in onResume because the onLoadFinished would be called twice if initLoader is put in onActivityCreated
        // according to http://developer.android.com/guide/components/fragments.html#Creating
        // and http://stackoverflow.com/questions/11293441/android-loadercallbacks-onloadfinished-called-twice
        // but....not work!
        super.onResume();
        if (mPlaylistMetaData.size() == 0) {
            SongLoaderRunnable loader = new SongLoaderRunnable(this);
            Thread loaderThread = new Thread(loader);
            loaderThread.start();
        }
    }

    @Override
    public void onStop () {
        super.onStop();
    }

    private void initViews() {
        View thisView = getView();
        playlistContainer = (PinnedSectionListView) thisView.findViewById(R.id.playlist_container);
        playlistContainer.setOnItemClickListener(this);
        offsetToLeft = playlistContainer.getPaddingLeft();
        //playlistContainer.setOnTouchListener(this);
        createPlaylistButtonImageView = (ImageView) thisView.findViewById(R.id.create_playlist_button);
    }
    private void setViews() {
        playlistContainer.setShadowVisible(false);
        playlistContainer.setAdapter(new PlaylistPinnedSectionListAdapter(getActivity(), R.layout.music_list_item_template, mPlaylistMetaData));
        playlistPinnedSectionListAdapter = (PlaylistPinnedSectionListAdapter) playlistContainer.getAdapter();
        createPlaylistButtonImageView.setOnClickListener(this);
    }

    @Override
    public void onClick(View view) {
        switch (view.getId()) {
            case R.id.create_playlist_button:
                Intent intent = new Intent(getActivity(), MusicCreatePlaylistActivity.class);
                startActivity(intent);
                break;
        }
    }

    private BroadcastReceiver mCreatePlaylistReceiver = new BroadcastReceiver() {
        @Override
        public void onReceive(Context context, Intent intent) {
            Bundle extras = intent.getExtras();
            Long playlistId = (Long) extras.get(PLAYLIST_URI);
            PlaylistMetaData playlistMetaData = MusicLib.getPlaylistMetadata(self.getActivity(), playlistId);
            mUserGeneratedPlaylistMetaDatas.add(0, playlistMetaData);

            mPlaylistMetaData.clear();
            mPlaylistMetaData.addAll(mAutoGeneratedPlaylistMetaDatas);
            mPlaylistMetaData.addAll(mUserGeneratedPlaylistMetaDatas);
            playlistPinnedSectionListAdapter.updatePlaylistArrayList(mPlaylistMetaData);

            Intent addMusicToPlaylistIntent = new Intent(getActivity(), MusicListDetailActivity.class);
            addMusicToPlaylistIntent.putExtra(MusicListFragment.PLAYLIST_POSITION, 7);
            addMusicToPlaylistIntent.putExtra(MusicListDetailActivity.PLAYLIST_ID, playlistId);
            startActivity(addMusicToPlaylistIntent);
        }
    };

    private BroadcastReceiver mUpdatePlaylistReceiver = new BroadcastReceiver() {
        @Override
        public void onReceive(Context context, Intent intent) {
            Bundle extras = intent.getExtras();
            if (extras.get(MusicAddToPlaylistActivity.UPDATE_ALL_PLAYLIST) != null){
                boolean isUpdateAll = (Boolean) extras.get(MusicAddToPlaylistActivity.UPDATE_ALL_PLAYLIST);
                if (isUpdateAll == true) {
                    PlaylistManager playlistManager = PlaylistManager.getInstance();
                    ArrayList<PlaylistMetaData> UGPlaylistMetaDatas = playlistManager.getUserGeneratedPlaylist();
                    mUserGeneratedPlaylistMetaDatas = UGPlaylistMetaDatas;

                    mPlaylistMetaData.clear();
                    mPlaylistMetaData.addAll(mAutoGeneratedPlaylistMetaDatas);
                    mPlaylistMetaData.addAll(mUserGeneratedPlaylistMetaDatas);
                    mPlaylistUIHandler.post(new Runnable() {
                        @Override
                        public void run() {
                            playlistPinnedSectionListAdapter.updatePlaylistArrayList(mPlaylistMetaData);
                        }
                    });
                }
            } else if (extras.get(PlaylistManager.BPM_UPDATED) != null) {
                boolean isBpmUpdated = (Boolean)extras.get(PlaylistManager.BPM_UPDATED);
                if (isBpmUpdated) {
                    ArrayList<Object> playlistMetaDatas = new ArrayList<Object>();
                    PlaylistManager playlistManager = PlaylistManager.getInstance();
                    PlaylistMetaData halfHourSlowPlaylistMetaData = playlistManager.generate30MinsPlaylist(PlaylistManager.SLOW_PACE_PLAYLIST);
                    PlaylistMetaData halfHourMediumPlaylistMetaData = playlistManager.generate30MinsPlaylist(PlaylistManager.MEDIUM_PACE_PLAYLIST);
                    PlaylistMetaData oneHourSlowPlaylistMetaData = playlistManager.generate1HrPlaylist(PlaylistManager.SLOW_PACE_PLAYLIST);
                    PlaylistMetaData oneHourMediumPlaylistMetaData = playlistManager.generate1HrPlaylist(PlaylistManager.MEDIUM_PACE_PLAYLIST);
                    playlistMetaDatas.add(new PlaylistSectionData(getResources().getString(R.string._30_mins_playlist)));
                    playlistMetaDatas.add(halfHourSlowPlaylistMetaData);
                    playlistMetaDatas.add(halfHourMediumPlaylistMetaData);
                    playlistMetaDatas.add(new PlaylistSectionData(getResources().getString(R.string._1_hour_playlist)));
                    playlistMetaDatas.add(oneHourSlowPlaylistMetaData);
                    playlistMetaDatas.add(oneHourMediumPlaylistMetaData);
                    playlistMetaDatas.add(new PlaylistSectionData(getResources().getString(R.string.your_playlist)));
                    ArrayList<PlaylistMetaData> UGPlaylistMetaDatas = playlistManager.getUserGeneratedPlaylist();

                    mAutoGeneratedPlaylistMetaDatas = playlistMetaDatas;
                    mUserGeneratedPlaylistMetaDatas = UGPlaylistMetaDatas;

                    mPlaylistMetaData.clear();
                    mPlaylistMetaData.addAll(mAutoGeneratedPlaylistMetaDatas);
                    mPlaylistMetaData.addAll(mUserGeneratedPlaylistMetaDatas);
                    mPlaylistUIHandler.post(new Runnable() {
                        @Override
                        public void run() {
                            playlistPinnedSectionListAdapter.updatePlaylistArrayList(mPlaylistMetaData);
                        }
                    });
                }
            } else if (extras.get(PlaylistManager.PLAYLIST_DELETED) != null) {
                boolean isPlaylistDeleted = (Boolean)extras.get(PlaylistManager.PLAYLIST_DELETED);
                if (isPlaylistDeleted) {
                    Integer position = (Integer) extras.get(PLAYLIST_POSITION);
                    mUserGeneratedPlaylistMetaDatas.remove(position - 7);
                    mPlaylistMetaData.clear();
                    mPlaylistMetaData.addAll(mAutoGeneratedPlaylistMetaDatas);
                    mPlaylistMetaData.addAll(mUserGeneratedPlaylistMetaDatas);
                    mPlaylistUIHandler.post(new Runnable() {
                        @Override
                        public void run() {
                            playlistPinnedSectionListAdapter.updatePlaylistArrayList(mPlaylistMetaData);
                        }
                    });
                }
            } else {
                Long playlistId       = extras.getLong(MusicListDetailActivity.PLAYLIST_ID);
                int playlistPosition  = extras.getInt(MusicListFragment.PLAYLIST_POSITION);
                PlaylistMetaData playlistMetaData = MusicLib.getPlaylistMetadata(getActivity(), playlistId);
                mPlaylistMetaData.set(playlistPosition, playlistMetaData);
                playlistPinnedSectionListAdapter.notifyDataSetChanged();
            }
        }
    };

    private Handler mPlaylistUIHandler = new Handler();

    @Override
    public void OnPlaylistPrepared(ArrayList<Object> autoGeneratedPlaylistMetaDatas, ArrayList<PlaylistMetaData> userGeneratedPlaylistMetaDatas) {
        mAutoGeneratedPlaylistMetaDatas = autoGeneratedPlaylistMetaDatas;
        mUserGeneratedPlaylistMetaDatas = userGeneratedPlaylistMetaDatas;

        mPlaylistMetaData.addAll(mAutoGeneratedPlaylistMetaDatas);
        mPlaylistMetaData.addAll(mUserGeneratedPlaylistMetaDatas);
        mPlaylistUIHandler.post(new Runnable() {
            @Override
            public void run() {
                playlistPinnedSectionListAdapter.updatePlaylistArrayList(mPlaylistMetaData);
            }
        });
    }

    @Override
    public void onItemClick(AdapterView<?> adapterView, View view, int position, long id) {
        if (playlistPinnedSectionListAdapter.getItemViewType(position) == PlaylistPinnedSectionListAdapter.TYPE_PLAYLIST) {
            Intent intent = new Intent(getActivity(), MusicListDetailActivity.class);
            intent.putExtra(MusicListFragment.PLAYLIST_POSITION, position);
            intent.putExtra(MusicListDetailActivity.PLAYLIST_ID, id);
            startActivity(intent);
        }
    }

    private class PlaylistPinnedSectionListAdapter extends ArrayAdapter<Object> implements
            PinnedSectionListAdapter,
            View.OnClickListener,
            View.OnTouchListener{
        public static final int TYPE_SECTION  = 0;
        public static final int TYPE_PLAYLIST = 1;
        SharedPreferences mPlaylistPreferences;
        private ArrayList<Object> mPlaylistArrayList;
        private View mSelectedPlaylist = null;
        private View mSwipeView;
        private Context mContext;
        private boolean isMove = false, isOpened = false;
        private float originX, offset;
        private int maxOffset = -1, direction;

        public PlaylistPinnedSectionListAdapter(Context context, int resource, ArrayList<Object> list) {
            super(context, resource, list);
            mContext = context;
            mPlaylistPreferences = mContext.getSharedPreferences(Constant.PLAYLIST, 0);
            mPlaylistArrayList = list;
        }

        public void updatePlaylistArrayList (ArrayList<Object> playlistArrayList) {
            if (isOpened) {
                mSwipeView.setX(mSwipeView.getX() + maxOffset);
                isOpened = false;
            }
            mPlaylistArrayList = playlistArrayList;
            notifyDataSetChanged();
        }

        public void initSelectedPlaylist () {
            Long id = mPlaylistPreferences.getLong(Constant.PLAYLIST_ID, -1);
            if (id == -1 && mPlaylistArrayList.size() > 0) {
                id = ((PlaylistMetaData)mPlaylistArrayList.get(1)).mId;
                mPlaylistPreferences.edit().remove(Constant.PLAYLIST_ID).putLong(Constant.PLAYLIST_ID, id).commit();
            }
        }

        @Override
        public int getItemViewType (int position) {
            if (mPlaylistArrayList.get(position) instanceof PlaylistMetaData) {
                return TYPE_PLAYLIST;
            }
            return TYPE_SECTION;
        }

        @Override
        public boolean isItemViewTypePinned(int viewType) {
            if (viewType == TYPE_SECTION) {
                return true;
            }
            return false;
        }

        @Override
        public int getCount() {
            return mPlaylistArrayList.size();
        }

        @Override
        public Object getItem(int i) {
            return mPlaylistArrayList.get(i);
        }

        @Override
        public long getItemId(int i) {
            if (mPlaylistArrayList.get(i) instanceof PlaylistMetaData) {
                return ((PlaylistMetaData) mPlaylistArrayList.get(i)).mId;
            }
            return -1;
        }

        @Override
        public View getView(int i, View view, ViewGroup viewGroup) {
            Long selectedPlaylist = mPlaylistPreferences.getLong(Constant.PLAYLIST_ID, -1);
            if (view == null) {
                if (getItemViewType(i) == TYPE_PLAYLIST) {
                    view = inflater.inflate(R.layout.music_list_template, null);

                    PlaylistMetaData playlistMetaData = (PlaylistMetaData) mPlaylistArrayList.get(i);
                    LinearLayout playlistContainer  = (LinearLayout) view.findViewById(R.id.playlist);
                    TextView titleTextView          = (TextView) view.findViewById(R.id.playlist_title);
                    TextView tracksTextView         = (TextView) view.findViewById(R.id.playlist_tracks);
                    TextView choosePlaylistTextView = (TextView) view.findViewById(R.id.choose_playlist);
                    Button delete                   = (Button)   view.findViewById(R.id.delete);
                    PlaylistViewTag playlistViewTag = new PlaylistViewTag(i, playlistMetaData.mId, playlistContainer, titleTextView, tracksTextView, choosePlaylistTextView, delete);

                    titleTextView.setText(playlistMetaData.mTitle);
                    tracksTextView.setText(playlistMetaData.mTracks.toString());

                    // set song id to tag and onClick event
                    view.setTag(playlistViewTag);

                    // set song id to tag and onClick event
                    choosePlaylistTextView.setTag(playlistMetaData.mId);
                    choosePlaylistTextView.setOnClickListener(this);
                    if (playlistMetaData.mId.equals(selectedPlaylist)){
                        choosePlaylistTextView.setBackground(mContext.getResources().getDrawable(R.drawable.playlist_selection_radio_button_selected));
                        mSelectedPlaylist = choosePlaylistTextView;
                    } else {
                        choosePlaylistTextView.setBackground(mContext.getResources().getDrawable(R.drawable.playlist_selection_radio_button));
                    }

                    // set view tag for playlist container
                    PlaylistContainerTag playlistContainerTag = new PlaylistContainerTag(i, playlistMetaData.mId);
                    playlistContainer.setTag(playlistContainerTag);
                    playlistContainer.setOnTouchListener(this);

                    // setting deleting button on click listener
                    delete.setTag(playlistContainerTag);
                    delete.setOnClickListener(this);

                    // setting max offset
                    if (maxOffset == -1) {
                        maxOffset = delete.getLayoutParams().width;
                    }
                } else {
                    PlaylistSectionData playlistSectionData = (PlaylistSectionData) mPlaylistArrayList.get(i);
                    view = inflater.inflate(R.layout.music_list_section_title_template, null);
                    TextView titleTextView = (TextView) view.findViewById(R.id.playlist_section_title);
                    SectionTitleViewTag sectionTitleViewTag = new SectionTitleViewTag(titleTextView);

                    titleTextView.setText(playlistSectionData.mSectionTitle);
                    view.setTag(sectionTitleViewTag);
                }
            } else {
                if (getItemViewType(i) == TYPE_PLAYLIST) {
                    PlaylistViewTag playlistViewTag;
                    PlaylistMetaData playlistMetaData = (PlaylistMetaData) mPlaylistArrayList.get(i);
                    if (view.getTag() instanceof PlaylistViewTag) {
                        // reset position and id
                        playlistViewTag =  (PlaylistViewTag) view.getTag();
                        playlistViewTag.position = i;
                        playlistViewTag.id = playlistMetaData.mId;

                        // reset position and id
                        PlaylistContainerTag playlistContainerTag = (PlaylistContainerTag) playlistViewTag.mPlaylistContainer.getTag();
                        playlistContainerTag.position = i;
                        playlistContainerTag.id = playlistMetaData.mId;

                        // reset
                        PlaylistContainerTag deleteContainerTag = (PlaylistContainerTag) playlistViewTag.mDelete.getTag();
                        deleteContainerTag.position = i;
                        deleteContainerTag.id = playlistMetaData.mId;
                    } else {
                        view = inflater.inflate(R.layout.music_list_template, null);

                        LinearLayout playlistContainer  = (LinearLayout) view.findViewById(R.id.playlist);
                        TextView titleTextView          = (TextView) view.findViewById(R.id.playlist_title);
                        TextView tracksTextView         = (TextView) view.findViewById(R.id.playlist_tracks);
                        TextView choosePlaylistTextView = (TextView) view.findViewById(R.id.choose_playlist);
                        Button delete                   = (Button) view.findViewById(R.id.delete);
                        playlistViewTag = new PlaylistViewTag(i, playlistMetaData.mId, playlistContainer, titleTextView, tracksTextView, choosePlaylistTextView, delete);

                        // set song id to tag and onClick event
                        view.setTag(playlistViewTag);

                        // set view tag for playlist container
                        PlaylistContainerTag playlistContainerTag = new PlaylistContainerTag(i, playlistMetaData.mId);
                        playlistContainer.setTag(playlistContainerTag);
                        playlistContainer.setOnTouchListener(this);

                        // set on click for delete
                        delete.setTag(playlistContainerTag);
                        delete.setOnClickListener(this);
                    }
                    playlistViewTag.mTitleTextView.setText(playlistMetaData.mTitle);
                    playlistViewTag.mTracksTextView.setText(playlistMetaData.mTracks.toString());

                    // set song id to tag and onClick event
                    playlistViewTag.mChoosePlaylistTextView.setTag(playlistMetaData.mId);
                    playlistViewTag.mChoosePlaylistTextView.setOnClickListener(this);

                    if (playlistMetaData.mId.equals(selectedPlaylist)){
                        // selected playlist
                        playlistViewTag.mChoosePlaylistTextView.setBackground(mContext.getResources().getDrawable(R.drawable.playlist_selection_radio_button_selected));
                        playlistViewTag.mChoosePlaylistTextView.setTextColor(getResources().getColor(R.color.white));
                        mSelectedPlaylist = playlistViewTag.mChoosePlaylistTextView;
                    } else {
                        playlistViewTag.mChoosePlaylistTextView.setBackground(mContext.getResources().getDrawable(R.drawable.playlist_selection_radio_button));
                        playlistViewTag.mChoosePlaylistTextView.setTextColor(getResources().getColor(R.color.black));
                    }

                    view.setLeft(offsetToLeft);
                } else {
                    SectionTitleViewTag sectionTitleViewTag;
                    PlaylistSectionData playlistSectionData = (PlaylistSectionData) mPlaylistArrayList.get(i);
                    if (view.getTag() instanceof SectionTitleViewTag) {
                        sectionTitleViewTag = (SectionTitleViewTag) view.getTag();
                    } else {
                        view = inflater.inflate(R.layout.music_list_section_title_template, null);
                        TextView titleTextView = (TextView) view.findViewById(R.id.playlist_section_title);
                        sectionTitleViewTag = new SectionTitleViewTag(titleTextView);
                        view.setTag(sectionTitleViewTag);
                    }
                    sectionTitleViewTag.mTitleTextView.setText(playlistSectionData.mSectionTitle);
                }
            }
            return view;
        }

        @Override
        public void onClick(View view) {
            switch (view.getId()) {
                case R.id.choose_playlist:
                    Long newPlaylistId = (Long) view.getTag();
                    Long oldPlaylistId = mPlaylistPreferences.getLong(Constant.PLAYLIST_ID, -1);
                    if (!oldPlaylistId.equals(newPlaylistId)) {
                        mPlaylistPreferences.edit().remove(Constant.PLAYLIST_ID).putLong(Constant.PLAYLIST_ID, newPlaylistId).commit();
                        view.setBackground(mContext.getResources().getDrawable(R.drawable.playlist_selection_radio_button_selected));
                        ((TextView)view).setTextColor(getResources().getColor(R.color.white));
                        if (mSelectedPlaylist != null) {
                            mSelectedPlaylist.setBackground(mContext.getResources().getDrawable(R.drawable.playlist_selection_radio_button));
                            ((TextView) mSelectedPlaylist).setTextColor(getResources().getColor(R.color.black));
                        }
                        mSelectedPlaylist = view;
                        notifyPlaylistChanged(newPlaylistId);
                    }
                    break;
                case R.id.delete:
                    PlaylistContainerTag positionAndId = (PlaylistContainerTag) view.getTag();
                    MusicLib.deletePlaylistFromId(mContext, positionAndId.id);
                    Intent intent = new Intent(UPDATE_PLAYLIST);
                    intent.putExtra(PlaylistManager.PLAYLIST_DELETED, true);
                    intent.putExtra(PLAYLIST_POSITION, positionAndId.position);
                    LocalBroadcastManager.getInstance(mContext).sendBroadcast(intent);
                    break;
            }
        }

        @Override
        public boolean onTouch(View view, MotionEvent motionEvent) {
            int action = MotionEventCompat.getActionMasked(motionEvent);
            switch(action) {
                case (MotionEvent.ACTION_DOWN) :
                    if (isOpened && view != mSwipeView) {
                        isOpened = false;
                        mSwipeView.setX(mSwipeView.getX() + maxOffset);
                    }
                    offset = 0;
                    originX = motionEvent.getX();
                    mOnDisableViewPagerSwipeListener.setDisableViewPagerSwipe(false);
                    return true;
                case (MotionEvent.ACTION_MOVE) :
                    mOnDisableViewPagerSwipeListener.setDisableViewPagerSwipe(false);
                    motionEvent.getAction();
                    offset = motionEvent.getX() - originX;
                    if (isOpened) {
                        direction = RIGHT;
                    } else {
                        direction = LEFT;
                    }
                    if (Math.abs(offset) > 3) {
                        isMove = true;
                    }
                    return true;

                case (MotionEvent.ACTION_UP) :
                    if (isMove) {
                        TranslateAnimation translateAnimation ;
                        if (direction == LEFT) {
                            isOpened = true;
                            translateAnimation = new TranslateAnimation(
                                    Animation.ABSOLUTE, maxOffset,
                                    Animation.RELATIVE_TO_SELF, 0,
                                    Animation.RELATIVE_TO_SELF, 0,
                                    Animation.RELATIVE_TO_SELF, 0);
                            view.setX(view.getX() - maxOffset);
                            mSwipeView = view;
                        } else {
                            isOpened = false;
                            translateAnimation = new TranslateAnimation(
                                    Animation.ABSOLUTE, -maxOffset,
                                    Animation.RELATIVE_TO_SELF, 0,
                                    Animation.RELATIVE_TO_SELF, 0,
                                    Animation.RELATIVE_TO_SELF, 0);
                            view.setX(view.getX() + maxOffset);
                        }
                        mOnDisableViewPagerSwipeListener.setDisableViewPagerSwipe(true);

                        translateAnimation.setDuration(100);
                        AnimationSet animationSet = new AnimationSet(true);
                        animationSet.addAnimation(translateAnimation);
                        animationSet.setFillBefore(false);
                        animationSet.setFillAfter(true);
                        view.startAnimation(animationSet);

                        isMove = false;
                    } else {
                        PlaylistContainerTag viewTag = (PlaylistContainerTag) view.getTag();
                        Intent intent = new Intent(getActivity(), MusicListDetailActivity.class);
                        intent.putExtra(MusicListFragment.PLAYLIST_POSITION, viewTag.position);
                        intent.putExtra(MusicListDetailActivity.PLAYLIST_ID, viewTag.id);
                        startActivity(intent);
                    }
                    return true;
                case (MotionEvent.ACTION_CANCEL) :
                    Log.d(TAG, "action cancel");
                    isMove = false;
                    mOnDisableViewPagerSwipeListener.setDisableViewPagerSwipe(true);
                    return true;
                case (MotionEvent.ACTION_OUTSIDE) :
                    Log.d(TAG, "action outside");
                    mOnDisableViewPagerSwipeListener.setDisableViewPagerSwipe(true);
                    isMove = false;
                    return true;
            }
            return false;
        }

        public class PlaylistViewTag {
            int position;
            long id;
            LinearLayout mPlaylistContainer;
            TextView mTitleTextView;
            TextView mTracksTextView;
            TextView mChoosePlaylistTextView;
            Button mDelete;
            public PlaylistViewTag (int position, long id, LinearLayout playlistContainer, TextView title, TextView tracks, TextView choosePlaylist, Button delete) {
                this.position = position;
                this.id = id;
                mPlaylistContainer = playlistContainer;
                mTitleTextView = title;
                mTracksTextView = tracks;
                mChoosePlaylistTextView = choosePlaylist;
                mDelete = delete;
            }
        }
        public class PlaylistContainerTag {
            int position;
            long id;
            public PlaylistContainerTag (int position, long id) {
                this.position = position;
                this.id = id;
            }
        }
        public class SectionTitleViewTag {
            TextView mTitleTextView;
            public SectionTitleViewTag (TextView title) {
                mTitleTextView = title;
            }
        }
    }

    private void notifyPlaylistChanged (Long playlistId) {
        Intent intent = new Intent(CHANGE_PLAYLIST);
        intent.putExtra(PLAYLIST_ID, playlistId);
        LocalBroadcastManager.getInstance(getActivity()).sendBroadcast(intent);
    }

    public class SongLoaderRunnable implements Runnable, LoaderManager.LoaderCallbacks<Cursor> {
        Fragment fragment;
        OnPlaylistPreparedListener mPlaylistPreparedListener;

        public SongLoaderRunnable(Fragment f) {
            fragment = f;
            mPlaylistPreparedListener = (OnPlaylistPreparedListener) f;
        }

        @Override
        public void run() {
            Looper.prepare();
            getLoaderManager().initLoader(MUSIC_LOADER_ID, null, this);
        }

        @Override
        public Loader<Cursor> onCreateLoader(int i, Bundle bundle) {
            return new CursorLoader(fragment.getActivity(), MusicLib.getMusicUri(), MUSIC_SELECT_PROJECTION, null, null, null);
        }

        @Override
        public void onLoadFinished(Loader<Cursor> cursorLoader, Cursor cursor) {
            PlaylistManager playlistManager = PlaylistManager.getInstance();
            playlistManager.init();
            playlistManager.setContext(fragment.getActivity());
            playlistManager.setCursor(cursor);
            playlistManager.scan();
            ArrayList<Object> playlistMetaDatas = new ArrayList<Object>();
            PlaylistMetaData halfHourSlowPlaylistMetaData = playlistManager.generate30MinsPlaylist(PlaylistManager.SLOW_PACE_PLAYLIST);
            PlaylistMetaData halfHourMediumPlaylistMetaData = playlistManager.generate30MinsPlaylist(PlaylistManager.MEDIUM_PACE_PLAYLIST);
            PlaylistMetaData oneHourSlowPlaylistMetaData = playlistManager.generate1HrPlaylist(PlaylistManager.SLOW_PACE_PLAYLIST);
            PlaylistMetaData oneHourMediumPlaylistMetaData = playlistManager.generate1HrPlaylist(PlaylistManager.MEDIUM_PACE_PLAYLIST);
            playlistMetaDatas.add(new PlaylistSectionData(getResources().getString(R.string._30_mins_playlist)));
            playlistMetaDatas.add(halfHourSlowPlaylistMetaData);
            playlistMetaDatas.add(halfHourMediumPlaylistMetaData);
            playlistMetaDatas.add(new PlaylistSectionData(getResources().getString(R.string._1_hour_playlist)));
            playlistMetaDatas.add(oneHourSlowPlaylistMetaData);
            playlistMetaDatas.add(oneHourMediumPlaylistMetaData);
            playlistMetaDatas.add(new PlaylistSectionData(getResources().getString(R.string.your_playlist)));
            ArrayList<PlaylistMetaData> UGPlaylistMetaDatas = playlistManager.getUserGeneratedPlaylist();
            //playlistMetaDatas.addAll(UGPlaylistMetaDatas);

            mPlaylistPreparedListener.OnPlaylistPrepared(playlistMetaDatas, UGPlaylistMetaDatas);
            //need to destroy loader so that onLoadFinished won't be called twice
            getLoaderManager().destroyLoader(MUSIC_LOADER_ID);
            Thread.interrupted();
        }

        @Override
        public void onLoaderReset(Loader<Cursor> cursorLoader) {

        }
    }

    public void setOnDisableViewPagerSwipeListener (OnDisableViewPagerSwipeListener listener) {
        mOnDisableViewPagerSwipeListener = listener;
    }
}
